/* This file was generated by SableCC (http://www.sablecc.org/). */

package Project3.analysis;

import java.util.*;
import Project3.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermExpression(ATermExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABinopexpExpression(ABinopexpExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnaryopexpExpression(AUnaryopexpExpression node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleTerm(ASingleTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleTerm(AMultipleTerm node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdValue(AIdValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberValue(ANumberValue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleExplist(AMultipleExplist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleExplist(ASingleExplist node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignvalStmt(AAssignvalStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPrintstmtStmt(APrintstmtStmt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultipleStmts(AMultipleStmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASingleStmts(ASingleStmts node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLparen(TLparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRparen(TRparen node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAssignment(TAssignment node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSemicolon(TSemicolon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcho(TEcho node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnaryop(TUnaryop node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAddsub(TAddsub node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMuldivmod(TMuldivmod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
